#!/usr/bin/env bash

sign(){
    # echo -n <message> | sign <hex_key>
    openssl dgst -sha256 -mac HMAC -macopt hexkey:$1 | cut -d" " -f2
}

req(){
    # echo <json> | req <method> <url>

    key=`jq -r '.key' < config/manifest.json`
    secret=`jq -r '.secret' < config/manifest.json`

    nonce=$RANDOM$RANDOM$RANDOM
    timestamp=`date +%s`
    version=1
    signature=`echo -n $key$nonce$timestamp | sign $secret`
    xsignature="Signature access-key=\"$key\", nonce=\"$nonce\", timestamp=\"$timestamp\", version=\"$version\", signature=\"$signature\""

    #echo "curl -i -s -H \"Content-Type: application/json\" -H \"X-Signature: $xsignature\" --data-binary @- -X \"$1\" \"$2\" | jq ."
    curl -s -H "Content-Type: application/json" -H "X-Signature: $xsignature" --data-binary @- -X "$1" "$2" | jq .
}

upload(){
    # echo <json> | req <method> <url>

    key=`jq -r '.key' < config/manifest.json`
    secret=`jq -r '.secret' < config/manifest.json`

    nonce=$RANDOM$RANDOM$RANDOM
    timestamp=`date +%s`
    version=1
    signature=`echo -n $key$nonce$timestamp | sign $secret`
    xsignature="Signature access-key=\"$key\", nonce=\"$nonce\", timestamp=\"$timestamp\", version=\"$version\", signature=\"$signature\""

    curl -s -H "X-Signature: $xsignature" -F file=@- -X POST "$1"
}

url=`jq -r '.debug_url' < config/manifest.json`
project_name=`jq -r '.name' < config/manifest.json`

if [[ "$url" == "null" ]];then
    url="https://api.robotunion.net"
fi

# Example .robot.dev
# {
#   "user": "johndoe",
#   "user_id": "xxxxxxxxxxxxx-xxxxxxxxxxx-xxxxxxxx-xxxxx",
#   "account": "johndoe",
#   "account_id": "xxxxxxxxxxxxx-xxxxxxxxxxx-xxxxxxxx-xxxxx",
#   "development_id": "xxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxx-xxxxx"
# }

if ! test -f .robot.dev;then
    echo "Development not found, creating new one ... "
    echo -n "Listing accounts ... "
    req GET "$url/user/v1/profile" | jq -r '{user: .data.username, user_id: .data.id, account: .data.permissions[].account.name, account_id: .data.permissions[].account.id}' > .robot.dev.tmp
    account_id=`jq -r '.account_id' < .robot.dev.tmp`
    account=`jq -r '.account' < .robot.dev.tmp`
    echo "found \"$account\" with ID $account_id"
    echo -n "Creating Development ... "
    dev_id=`jq -nc --arg account_id "$account_id" '{$account_id}' | req POST "$url/user/v1/developments" | jq -r '.data.id'`
    jq --arg development_id "$dev_id" '. * {$development_id}' < .robot.dev.tmp > .robot.dev
    rm .robot.dev.tmp
    echo -en "\e[32m"
    echo "[ok]"
    echo -en "\e[0m"
fi

username=`jq -r '.user' < .robot.dev`
account=`jq -r '.account' < .robot.dev`
account_id=`jq -r '.account_id' < .robot.dev`
dev_id=`jq -r '.development_id' < .robot.dev`

echo -n "Compiling ... "
composer exec rpkg
echo -en "\e[32m"
echo "[ok]"
echo -en "\e[0m"

echo -n "Uploading ... "
remoteObject=`upload "$url/app/v1/upload" < out/app.tsk | jq -r .data.src`
echo -en "\e[32m"
echo "[ok]"
echo -en "\e[0m"

echo -n "Launching ... "
jq -nc --arg name "$project_name" --arg package "$remoteObject" --arg status "launched" '{$package, $status, $name}' | req PATCH "$url/user/v1/developments/$dev_id" > .robot.dev.tmp
result=`jq -r '.status' < .robot.dev.tmp`
message=`jq -r '.message' < .robot.dev.tmp`

rm .robot.dev.tmp
if [[ "$result" == "error" ]] || [[ "$result" == "critical" ]];then
    echo -en "\e[31m"
    echo "[$result]"
    echo $message
    echo -en "\e[0m"
else
    echo -en "\e[32m"
    echo "[$result]"
    echo -en "\e[0m"

fi
