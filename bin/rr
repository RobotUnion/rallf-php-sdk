#!/usr/bin/env bash

sign(){
    # echo -n <message> | sign <hex_key>
    openssl dgst -sha256 -mac HMAC -macopt hexkey:$1 | cut -d" " -f2
}

req(){
    # echo <json> | req <method> <url>

    key=`jq -r '.key' < config/manifest.json`
    secret=`jq -r '.secret' < config/manifest.json`

    nonce=$RANDOM$RANDOM$RANDOM
    timestamp=`date +%s`
    version=1
    signature=`echo -n $key$nonce$timestamp | sign $secret`
    xsignature="Signature access-key=\"$key\", nonce=\"$nonce\", timestamp=\"$timestamp\", version=\"$version\", signature=\"$signature\""

    curl -s -H "Content-Type: application/json" -H "X-Signature: $xsignature" --data-binary @- -X "$1" "$2" | jq .
}

upload(){
    # echo <json> | req <method> <url>

    key=`jq -r '.key' < config/manifest.json`
    secret=`jq -r '.secret' < config/manifest.json`

    nonce=$RANDOM$RANDOM$RANDOM
    timestamp=`date +%s`
    version=1
    signature=`echo -n $key$nonce$timestamp | sign $secret`
    xsignature="Signature access-key=\"$key\", nonce=\"$nonce\", timestamp=\"$timestamp\", version=\"$version\", signature=\"$signature\""

    curl -s -H "X-Signature: $xsignature" -F file=@- -X POST "$1"
}

url="https://api-staging.robotunion.net"

# Example .robot.dev
# {
#   "user": "johndoe",
#   "user_id": "xxxxxxxxxxxxx-xxxxxxxxxxx-xxxxxxxx-xxxxx",
#   "account": "johndoe",
#   "account_id": "xxxxxxxxxxxxx-xxxxxxxxxxx-xxxxxxxx-xxxxx",
#   "developement_id": "xxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxx-xxxxx"
# }

# TODO: Implement select account
if ! test -f .robot.dev;then
    echo "Developement not found, creating new one ... "
    echo -n "Listing accounts ... "
    req GET "$url/user/v1/profile" | \
    jq -r '{user: .data.username, user_id: .data.id, account: .data.permissions[].account.name, account_id: .data.permissions[].account.id}' >\
    .robot.dev.tmp
    account_id=`jq -r '.account_id' < .robot.dev.tmp`
    account=`jq -r '.account' < .robot.dev.tmp`
    echo "found \"$account\" with ID $account_id"
    echo -n "Creating Developement ... "
    dev_id=`jq -nc --arg package "" --arg account_id "$account_id" '{$account_id, $package}' | req POST "$url/user/v1/developments" | jq -r '.data.id'`
    jq --arg developement_id "$dev_id" '. * {$developement_id}' < .robot.dev.tmp > .robot.dev
    rm .robot.dev.tmp
    echo "[ok]"
fi

username=`jq -r '.user' < .robot.dev`
account=`jq -r '.account' < .robot.dev`
account_id=`jq -r '.account_id' < .robot.dev`
dev_id=`jq -r '.developement_id' < .robot.dev`


echo -n "Compiling ... "
composer exec rpkg
echo "[ok]"
echo -n "Uploading ... "
remoteObject=`upload "$url/app/v1/upload" < out/app.tsk | jq -r .data.src`
echo "[ok]"
echo -n "Launching ... "
result=`echo "{\"package\": \"$remoteObject\", \"status\": \"launched\"}" | req PATCH "$url/user/v1/developments/$dev_id" | jq -r '.status'`
echo "[$result]"
