#!/usr/bin/env php
<?php

class RallfSigner {

    private $secret;

    /**
     * Signer constructor.
     * @param $key
     */
    public function __construct($key)
    {
        $this->secret = $key;
    }

    public function sign($message){
        return hash_hmac('SHA256', $message, hex2bin($this->secret));
    }
}

class RallfRequester {

    /**
     * @var
     */
    private $config;

    /**
     * Requester constructor.
     * @param $config
     */
    public function __construct($config)
    {
        $this->config = $config;
    }

    private function buildSignature(){

        $signer = new RallfSigner($this->config->secret);
        $nonce = uniqid();
        $timestamp = time();
        $version = 1;
        $signature = $signer->sign($this->config->key.$nonce.$timestamp);
        return "Signature access-key=\"{$this->config->key}\", nonce=\"$nonce\", timestamp=\"$timestamp\", version=\"$version\", signature=\"$signature\"";

    }

    public function request($method, $url, $params = []) {
        $opts = [
            'http' => [
                'method' => $method,
                'header' => "Accept: application/json\r\n" .
                    "Content-Type: application/json\r\n" .
                    "X-Signature: " . $this->buildSignature() . "\r\n",
                'content' => json_encode($params),
                'ignore_errors' => true
            ]
        ];

        $ctx = stream_context_create($opts);
        return json_decode(file_get_contents($this->config->url . $url, false, $ctx));
    }

    public function upload($url, $file){
        $boundary = "------------------------------rallf" . microtime();

        $headers = "Accept: application/json\r\n";
        $headers .= "Content-Type: multipart/form-data; boundary=" . $boundary . "\r\n";
        $headers .= "X-Signature: " . $this->buildSignature() . "\r\n";

        $content =  "--" . $boundary . "\r\n";
        $content .= "Content-Disposition: form-data; name=\"file\"; filename=\"app.tsk\"\r\n";
        $content .= "Content-Type: application/zip\r\n\r\n";
        $content .= file_get_contents($file) . "\r\n";
        $content .= "--" . $boundary . "--\r\n";

        $opts = [
            'http' => [
                'method' => 'POST',
                'header' => $headers,
                'content' => $content
            ]
        ];

        $ctx = stream_context_create($opts);
        return json_decode(file_get_contents($this->config->url . $url, false, $ctx));

    }
}

$config = json_decode(file_get_contents('config/manifest.json'));
$config->url = "https://api.rallf.com";
if(isset($config->debug_url)) $config->url = $config->debug_url;

$requester = new RallfRequester($config);

if(!file_exists('.robot.dev')) {
    echo "Development not found, creating new one ...\n";
    echo "Listing accounts ... ";
    $response = $requester->request('GET', '/user/v1/profile');
    $profile = $response->data;
    //print_r($profile);
    $numPermissions = count($profile->permissions);
    echo "found " . $numPermissions . " accounts:\n";

    for($i=0;$i<$numPermissions;$i++){
        $account = $profile->permissions[$i]->account;
        echo "[" . ($i+1) . "] " . $account->id . " (" . $account->name . ")\n";
    }
    $selected = 0;
    if(count($profile->permissions) > 1) $selected = 1;
    $account = $profile->permissions[$selected]->account;
    echo " * Selecting (1) account '" . $account->name . "' (ID " . $account->id . ")\n";
    echo "Creating new development ... ";
    $response = $requester->request('POST', '/user/v1/developments', ['account_id' => $account->id]);
    $development = $response->data;
    echo $development->id . " created OK\n";

    $identity = [
        'user' => $profile->username,
        'user_id' => $profile->id,
        'account' => $account->name,
        'account_id' => $account->id,
        'development_id' => $development->id
    ];
    file_put_contents('.robot.dev', json_encode($identity));
}
else $identity = json_decode(file_get_contents('.robot.dev'), true);

echo "Compiling ... ";
exec('composer exec rpkg');
echo "[ok]\n";

echo "Uploading ... ";
$response = $requester->upload('/app/v1/upload', 'out/app.tsk');
$path = $response->data->src;
echo "[ok]\n";

echo "Launching ... ";
$resp = $requester->request(
    'PATCH',
    '/user/v1/developments/' . $identity['development_id'],
    [
        'name' => $config->name,
        'package' => $path,
        'status' => 'launched'
    ]
);

switch($resp->status){
    case "success":
    case "ok":
        echo "[ok]\n";
        break;
    default:
        echo "[{$resp->status}]\n";
        echo "{$resp->message}\n";
        break;
}

# Example .robot.dev
# {
#   "user": "johndoe",
#   "user_id": "xxxxxxxxxxxxx-xxxxxxxxxxx-xxxxxxxx-xxxxx",
#   "account": "johndoe",
#   "account_id": "xxxxxxxxxxxxx-xxxxxxxxxxx-xxxxxxxx-xxxxx",
#   "development_id": "xxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxx-xxxxx"
# }
